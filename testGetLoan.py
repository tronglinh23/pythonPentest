import Account
import Bank
import unittest
from datetime import date, timedelta

class TestCalculateProfit(unittest.TestCase):
  # 0 < amount
  def testcase1(self):
    account = Account.Account(5,"linh",1000,date.today())
    amount = -1
    bank =  Bank.Bank()
    bank.add_account(account)
    res = bank.get_Loan(account, amount)
    self.assertEqual(res, False)
    
  # 0 < amount <= balance, balance < 200
  def testcase2(self):
    account = Account.Account(5,"linh",100,date.today())
    amount = 50
    bank =  Bank.Bank()
    bank.add_account(account)
    res = bank.get_Loan(account, amount)
    self.assertEqual(res, False)
  
  # 0 < amount <= balance, balance = 200
  def testcase3(self):
    account = Account.Account(5,"linh",200,date.today())
    amount = 50
    bank =  Bank.Bank()
    bank.add_account(account)
    res = bank.get_Loan(account, amount)
    self.assertEqual(res, False)
  
  # 0 < amount <= balance, balance > 200, getLoan = 0
  def testcase4(self):
    account = Account.Account(5,"linh",300,date.today())
    amount = 100
    bank =  Bank.Bank()
    bank.add_account(account)
    res = bank.get_Loan(account, amount)
    self.assertEqual(res, True)
  
  # 0 < amount <= balance, balance > 200, getLoan = 1
  def testcase5(self):
    account = Account.Account(5,"linh",300,date.today())
    amount = 100
    bank =  Bank.Bank()
    bank.add_account(account)
    condition = bank.get_Loan(account, amount)
    res = bank.get_Loan(account, amount)
    self.assertEqual(res, False)
  
  # amount > balance
  def testcase6(self):
    account = Account.Account(5,"linh",1000,date.today())
    amount = 1500
    bank =  Bank.Bank()
    bank.add_account(account)
    res = bank.get_Loan(account, amount)
    self.assertEqual(res, False)
     
  
if __name__ == "__main__":
  unittest.main()