import Account
import Bank
import unittest
from datetime import date, timedelta

class TestCalculateProfit(unittest.TestCase):
  # amount < 0
  def testcase1(self):
    bank =  Bank.Bank()
    accountWantToTransfer = Account.Account(1,"nga",1000,date.today())
    account = Account.Account(5,"linh",1000,date.today())
    bank.add_account(accountWantToTransfer)
    bank.add_account(account)
    amount = -1
    res = bank.transferMoney(account, accountWantToTransfer.id, amount)
    self.assertEqual(res, False)
  
  # 0 < amount <= balance, customer la nguoi chuyen tien
  def testcase2(self):
    bank =  Bank.Bank()
    accountWantToTransfer = Account.Account(1,"nga",1000,date.today())
    account = Account.Account(5,"linh",1000,date.today())
    bank.add_account(accountWantToTransfer)
    bank.add_account(account)
    amount = 500
    res = bank.transferMoney(account, account.id, amount)
    self.assertEqual(res, False)
    
  # # 0 < amount <= balance, customer khong ton tai
  def testcase3(self):
    bank =  Bank.Bank()
    account = Account.Account(5,"linh",1000,date.today())
    bank.add_account(account)
    amount = 500
    res = bank.transferMoney(account, 1, amount)
    self.assertEqual(res, False)
  
  # # 0 < amount <= balance, customer thoa man dieu kien
  def testcase4(self):
    bank =  Bank.Bank()
    accountWantToTransfer = Account.Account(1,"nga",1000,date.today())
    account = Account.Account(5,"linh",1000,date.today())
    bank.add_account(accountWantToTransfer)
    bank.add_account(account)
    amount = 500
    res = bank.transferMoney(account, accountWantToTransfer.id, amount)
    self.assertEqual(res, True)
  
  # amount > balance, customer la nguoi chuyen tien  
  def testcase5(self):
    bank =  Bank.Bank()
    accountWantToTransfer = Account.Account(1,"nga",1000,date.today())
    account = Account.Account(5,"linh",1000,date.today())
    bank.add_account(accountWantToTransfer)
    bank.add_account(account)
    amount = 1500
    res = bank.transferMoney(account, account.id, amount)
    self.assertEqual(res, False)
    
  # amount > balance, customer khong ton tai
  def testcase6(self):
    bank =  Bank.Bank()
    account = Account.Account(5,"linh",1000,date.today())
    bank.add_account(account)
    amount = 1500
    res = bank.transferMoney(account, 1, amount)
    self.assertEqual(res, False)
  
  # amount > balance, customer thoa man dieu kien
  def testcase7(self):
    bank =  Bank.Bank()
    accountWantToTransfer = Account.Account(1,"nga",1000,date.today())
    account = Account.Account(5,"linh",1000,date.today())
    bank.add_account(accountWantToTransfer)
    bank.add_account(account)
    amount = 1500
    res = bank.transferMoney(account, accountWantToTransfer.id, amount)
    self.assertEqual(res, False)
     
if __name__ == "__main__":
  unittest.main()