import Bank
import Account
import unittest
from datetime import date, timedelta

class TestCalculateProfit(unittest.TestCase):
  # 0 < d
  def testcase1(self):
    end_date = date.today() + timedelta(days=50)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, False)
  
  # 0 < d < 100
  def testcase2(self):
    end_date = date.today() - timedelta(days=99)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, 0)
    
  # d = 100
  def testcase3(self):
    end_date = date.today() - timedelta(days=100)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, 0)
    
  # 100 < d < 200
  def testcase4(self):
    end_date = date.today() - timedelta(days=105)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, 1000*0.02)
  
  # d = 200
  def testcase5(self):
    end_date = date.today() - timedelta(days=200)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, 1000*0.02)
  
  # 200 < d <= 300
  def testcase6(self):
    end_date = date.today() - timedelta(days=300)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, 1000*0.03)
  
  # 300 < d <= 700
  def testcase7(self):
    end_date = date.today() - timedelta(days=700)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, 1000*0.04)
  
  # d > 700
  def testcase8(self):
    end_date = date.today() - timedelta(days=705)
    account = Account.Account(5,"linh",1000,end_date)
    res = Bank.Bank.calculate_Profit_After_Time(self,account)
    self.assertEqual(res, 1000*0.05)
  
  
    
    
  
if __name__ == "__main__":
  unittest.main()