import Account
import Bank
from datetime import date, datetime
import time
    

def checkDateValid(Year, Month, Day):
    correctDate = None
    try:
        newDate = datetime(Year, Month, Day)
        correctDate = True
        if (date.today() - newDate.date()).days < 0:
          correctDate = False
    except ValueError:
        correctDate = False

    return correctDate

def showMenu():
  print(
    "🎉 Welcome to the bank! \n"
    "✨ Menu ✨\n"
    "1️⃣  Create an account \n"
    "2️⃣  Deposit money \n"
    "3️⃣  Withdraw money \n"
    "4️⃣  Check information \n"
    "5️⃣  Check profit \n"
    "6️⃣  Transfer money \n"
    "7️⃣  Get Loan \n"
    "8️⃣  exit \n"
  )

def main(): 
  # init data
  bank = Bank.Bank()
  Bob = Account.Account(1,"Bob", 100, date(2022, 1, 1))
  Alice = Account.Account(2,"Alice", 200, date(2023, 1, 1))
  Charlie = Account.Account(3, "Charlie", 300, date(2021, 1, 1))
  
  
  bank.add_account(Bob)
  bank.add_account(Alice)
  bank.add_account(Charlie)
  User = None
  
  while True:
    time.sleep(2)
    showMenu()
    k = input("Press enter to continue😊: ")
    match k:
      case "1":
        name = input("Enter your name: ")
        balance = int(input("Enter your balance: "))
        Year = int(input("Enter the year of creation: "))
        Month = int(input("Enter the month of creation: "))
        Day = int(input("Enter the day of creation: "))
        if(checkDateValid(Year, Month, Day)):
          if(balance > 0 and balance <= 2000):
            User = Account.Account(4, name, balance, date(Year, Month, Day))
            bank.add_account(User)
            print("Account created successfully 🎉")
            print(f"Your account Id: {User.id}")
          else:
            print("Invalid balance 😢")
        else:
          print("Invalid date 😢")
      case "2":
        User.deposit(int(input("Enter the amount you want to deposit: ")))
        print(f"User balance: {User.balance}")
      case "3":
        User.withdraw(int(input("Enter the amount you want to withdraw: ")))
        print(f"User balance: {User.balance}")
      case "4":
        print(User)
      case "5":
        print(f"Profit: {bank.calculate_Profit_After_Time(User)}")
      case "6":
        result = bank.transferMoney(User, int(input("Enter the id of the account you want to transfer to: ")), int(input("Enter the amount you want to transfer: ")))
        if result:
          print("Transfer successfully 🎉")
        else:
          print("Transfer failed 😢")
      case "7":
        result = bank.get_Loan(User, int(input("Enter the amount you want to get loan: ")))
        if result:
          print("Get loan successfully 🎉")
        else:
          print("Get loan failed 😢")
      case "8":
        print("Goodbye! 👋")
        exit()
      case _:
        print("Invalid input 😢")
            
    
    
if __name__ == "__main__":
  main()